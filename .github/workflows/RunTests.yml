#  Clippy, Rustfmt, Profiler and run test against all three rust channels;
# once that is done we will package the system in a docker contain and upload to the
# GitHub release registry.
name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@c5ed9ba6b7e1bb8aff90d43acd2f0af4990fa57c
      - name: Lint (clippy)
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets
      - name: Lint (rustfmt)
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --check
      - name: Install cargo readme
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-readme
          version: latest
      - name: Run cargo readme
        run: ./scripts/regenerate-readmes.sh
      - name: Check for differences
        run: git diff --exit-code

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
        features: [ --failure-output immediate-final ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1 # allows us to provide the components we want to use
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - name: Build
        run: cargo build --verbose
      - name: Install latest nextest release
        uses: taiki-e/install-action@nextest
      - name: Test with latest nextest release
        uses: actions-rs/cargo@v1
        with:
          command: nextest
          args: run ${{ matrix.features }}

