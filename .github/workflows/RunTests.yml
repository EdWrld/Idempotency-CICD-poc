#  Clippy, Rustfmt, Profiler and run test against all three rust channels;
# once that is done we will package the system in a docker contain and upload to the
# GitHub release registry.
name: Rust-CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
          - beta
          - nightly
        rust-version: [ 1.62, stable ]
        features: [ --failure-output immediate-final ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Lint (clippy)
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets -- #-D warnings # causes build to fail when encountering warnings
      - name: Lint (rustfmt)
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --check


  Test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
          - beta
          - nightly
        rust-version: [ 1.62, stable]
        features: [ --all-features ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1 # allows us to provide the components we want to use
        with:
          toolchain: ${{ matrix.rust-version }}
          override: true
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - name: Build
        run: cargo build --verbose
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.15.0'
          args: ${{ matrix.features }}

#      - name: Install latest nextest release
#        uses: taiki-e/install-action@nextest
#      - name: Test with latest nextest release
#        uses: actions-rs/cargo@v1
#        with:
#          command: nextest
#          args: run ${{ matrix.features }}

#    Profiling:
#      name: Profiling
#      runs-on: ubuntu-latest
#      strategy:
#        matrix:
#          toolchain:
#            - stable
#            - beta
#            - nightly
#          rust-version: [ 1.62, stable ]


